--- LessonPlanService.cs
+++ LessonPlanService.cs
@@ -10,6 +10,7 @@
 using Chalkable.Data.School.DataAccess;
 using Chalkable.Data.School.DataAccess.AnnouncementsDataAccess;
 using Chalkable.Data.School.Model.Announcements;
+using Microsoft.ReportingServices.Interfaces;
 
 namespace Chalkable.BusinessLogic.Services.School.Announcements
 {
@@ -55,6 +56,12 @@
 
         protected LessonPlanDataAccess CreateLessonPlanDataAccess(UnitOfWork unitOfWork)
         {
-            Trace.Assert(Context.SchoolYearId.HasValue);        
-            if (BaseSecurity.IsDistrictOrTeacher(Context))
+            return CreateLessonPlanDataAccess(unitOfWork, ServiceLocator);
+        }
+
+        private static LessonPlanDataAccess CreateLessonPlanDataAccess(UnitOfWork unitOfWork, IServiceLocatorSchool locator)
+        {
+            var context = locator.Context;
+            Trace.Assert(context.SchoolYearId.HasValue);
+            if (BaseSecurity.IsDistrictOrTeacher(context))
             {
@@ -60,6 +67,6 @@
             {
-                if (Context.Claims.HasPermission(ClaimInfo.VIEW_CLASSROOM_ADMIN) || Context.Claims.HasPermission(ClaimInfo.MAINTAIN_CLASSROOM_ADMIN))
-                    return new LessonPlanForAdminDataAccess(unitOfWork, Context.SchoolYearId.Value);
-                if (Context.Claims.HasPermission(ClaimInfo.VIEW_CLASSROOM) || Context.Claims.HasPermission(ClaimInfo.MAINTAIN_CLASSROOM))
-                    return new LessonPlanForTeacherDataAccess(unitOfWork, Context.SchoolYearId.Value);
+                if (context.Claims.HasPermission(ClaimInfo.VIEW_CLASSROOM_ADMIN) || context.Claims.HasPermission(ClaimInfo.MAINTAIN_CLASSROOM_ADMIN))
+                    return new LessonPlanForAdminDataAccess(unitOfWork, context.SchoolYearId.Value);
+                if (context.Claims.HasPermission(ClaimInfo.VIEW_CLASSROOM) || context.Claims.HasPermission(ClaimInfo.MAINTAIN_CLASSROOM))
+                    return new LessonPlanForTeacherDataAccess(unitOfWork, context.SchoolYearId.Value);
             }
@@ -65,6 +72,6 @@
             }
-            if (Context.Role == CoreRoles.STUDENT_ROLE)
-                return new LessonPlanForStudentDataAccess(unitOfWork, Context.SchoolYearId.Value);
+            if (context.Role == CoreRoles.STUDENT_ROLE)
+                return new LessonPlanForStudentDataAccess(unitOfWork, context.SchoolYearId.Value);
 
             throw new ChalkableException("Not supported role for lesson plan");
         }
@@ -307,10 +314,5 @@
         public override void SetAnnouncementsAsComplete(DateTime? toDate, bool complete)
         {
             Trace.Assert(Context.PersonId.HasValue);
-            CompleteAnnouncement(Context.PersonId.Value, complete, toDate);
-        }
-
-        private void CompleteAnnouncement(int personId, bool complete, DateTime? toDate)
-        {
             DoUpdate(u =>
             {
@@ -315,15 +317,6 @@
             DoUpdate(u =>
             {
-                var anns = CreateLessonPlanDataAccess(u).GetLessonPlansOrderedByDate(new LessonPlansQuery
-                {
-                    RoleId = Context.RoleId,
-                    ToDate = toDate,
-                    PersonId = personId
-                }).Announcements;
-
-                var da = new AnnouncementRecipientDataDataAccess(u);
-                foreach (var ann in anns)
-                    da.UpdateAnnouncementRecipientData(ann.Id, (int)AnnouncementTypeEnum.LessonPlan, null, personId, null, complete, null, null);
+                SetAnnouncementsAsComplete(u, ServiceLocator, toDate, complete);
             });
         }
 
@@ -327,6 +320,24 @@
             });
         }
 
+
+        public static void SetAnnouncementsAsComplete(UnitOfWork unitOfWork, IServiceLocatorSchool locator, DateTime? toDate, bool complete)
+        {
+
+            //TODO: remove this get method later 
+            //var anns = CreateLessonPlanDataAccess(unitOfWork, locator).GetLessonPlansOrderedByDate(new LessonPlansQuery
+            //{
+            //    RoleId = locator.Context.RoleId,
+            //    ToDate = toDate,
+            //    PersonId = locator.Context.PersonId,
+            //}).Announcements;
+
+            var da = new AnnouncementRecipientDataDataAccess(unitOfWork);
+            da.UpdateAnnouncementRecipientData(null, (int)AnnouncementTypeEnum.LessonPlan, locator.Context.SchoolYearId, locator.Context.PersonId, locator.Context.RoleId, complete, toDate, null);
+            //foreach (var ann in anns)
+            //    da.UpdateAnnouncementRecipientData(ann.Id, (int)AnnouncementTypeEnum.LessonPlan, null, locator.Context.PersonId, null, complete, null, null);
+        }
+        
         public override bool CanAddStandard(int announcementId)
         {
             return DoRead(u => BaseSecurity.IsTeacher(Context) && CreateLessonPlanDataAccess(u).CanAddStandard(announcementId));
