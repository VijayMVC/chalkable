@using System.Configuration
@using System.Web.Mvc
@using System.Web.Mvc.Html;
@using Chalkable.Common
@using Chalkable.Web.Extensions
@using Chalkable.Web.Tools

@helper RaygunInit() {
    if (CompilerHelper.IsProduction)
    {
        <script type="text/javascript">
        Raygun.init('@Settings.RaygunJsApiKey', { ignore3rdPartyErrors: true })
            .saveIfOffline(true)
            .withTags([location.origin])
            .setVersion('@Chalkable.Web.Tools.CompilerHelper.Version')
            .attach();
        </script>
    }
}

@helper MixPanel()
{
    if (CompilerHelper.IsProduction)
    {
    <!-- start Mixpanel -->
        <script type="text/javascript">
            (function (e, b) {
                if (!b.__SV) {
                    var a, f, i, g; window.mixpanel = b; a = e.createElement("script"); a.type = "text/javascript"; a.async = !0; a.src = ("https:" === e.location.protocol ? "https:" : "http:") + "//cdn.mxpnl.com/libs/mixpanel-2.2.min.js"; f = e.getElementsByTagName("script")[0]; f.parentNode.insertBefore(a, f); b._i = []; b.init = function (a, e, d) {
                        function f(b, h) { var a = h.split("."); 2 == a.length && (b = b[a[0]], h = a[1]); b[h] = function () { b.push([h].concat(Array.prototype.slice.call(arguments, 0))) } } var c = b; "undefined" !== typeof d ? c = b[d] =
                        [] : d = "mixpanel"; c.people = c.people || []; c.toString = function (b) { var a = "mixpanel"; "mixpanel" !== d && (a += "." + d); b || (a += " (stub)"); return a }; c.people.toString = function () { return c.toString(1) + ".people (stub)" }; i = "disable track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config people.set people.increment".split(" "); for (g = 0; g < i.length; g++) f(c, i[g]); b._i.push([a, e, d])
                    };
                    b.__SV = 1.2;
                }
            })(document, window.mixpanel || []);
            mixpanel.init("@Settings.MixPanelToken");
        </script>
    }
}

@helper RenderSiteRoot(UrlHelper Url)
{
    if (CompilerHelper.IsDebug)
    {
        <script type="text/javascript">
            var _ = window.location.href.toString().match(/https?:\/\/[^\/]+/);

            if (_ == null) _ = '';
            var WEB_SITE_ROOT = _ + '@Url.Content("~/")';
        </script>
    }
    else
    {
        <script type="text/javascript">var WEB_SITE_ROOT = window.location.href.toString().match(/https?:\/\/[^\/]+/) + '@Url.Content("~/")';</script>
    } 
}

@helper GoogleAnalytics()
{
    if (CompilerHelper.IsProduction)
    {
        <script type="text/javascript">
            (function (i, s, o, g, r, a, m) {
                i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
                    (i[r].q = i[r].q || []).push(arguments)
                }, i[r].l = 1 * new Date(); a = s.createElement(o),
                m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
            })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

            ga('create', 'UA-25952076-1', 'auto');
            ga('send', 'pageview');

        </script>
    }
}

@helper RenderSignInForm(UrlHelper Url, System.Web.Mvc.HtmlHelper Html)
{
   <div id="toppanel">
       <div id="panel">
           <div class="tab">
               <button id="close" class="toplogin closer">Close</button>		
           </div>
            <div class="content clearfix">
            <section class="signinarea">
                <div id="formContainer">
                   <form id="login" action="@Url.Content("~/User/LogOn")" method="post">
                   <div class = "sign-in-errors">
                      @Html.ValidationMessage("ValidationError")
                   </div>
                   <ul id="form" class="signinformclass">
                      <h3 class="signintitle">Sign in</h3>
                      <li>
                         <label class="signinformlabel">Email
                         </label>
                         <div>
                            <input id="UserName" name="UserName" type="email" spellcheck="false" class="fieldtext validate[required,custom[email]]"
                               value="" autofocus="autofocus" tabindex="1" required />
                         </div>
                         <p class="instruct index">
                         </p>
                      </li>
                      <li>
                         <label class="signinformlabel" id="title4" >Password
                         </label>
                         <div class="the-password">
                            <input id="Password" name="Password" type="password" class="pw field-password validate[required]"
                               value="" maxlength="25" tabindex="2" onkeyup="" required />
                         </div>
                      </li>
                      <li>
                         <fieldset>
                            <div>
                               <div class="fake-input checkbox">
                                  <span><input id="RememberMe" name="remember" type="checkbox" value="true"><input name="remember" type="hidden" value="false"></span>
                               </div>
                            </div>
                         </fieldset>
                      </li>
                      <li>
                         <p class="stayin">Stay signed in</p>
                      </li>
                      <li class="signin_button_container">
                          <a href="#" class="sign_in_button" tabindex="3"></a>
                         <p class="forgot"> <a href="#" id="flipToRecover" class="flipLink"> Forgot Password?</a> </p>
                      </li>
                   </ul>
                   <input type="submit" tabindex="3" style="visibility:hidden;"/>
                   </form>
                   <form id="recover" action="@Url.Content("~/User/ResetPassword")" method="post">
                   <ul id="form" class="signinformclass">
                      <h3 class="signintitle">Forgot Password</h3>
                      <li>
                         <label class="signinformlabel">Email </label>
                         <div>
                            <input id="recovery-email" type="email" name="email" spellcheck="false" class="fieldtext validate[required,custom[email]]" value="" maxlength="60" tabindex="2" required/>
                         </div>
                         <p class="instruct index">	</p>
                      </li>
                      <li class="signin_button_container recovery">
                         <a href="#" class="email_me_button">Email Me</a>
                         <p class="forgot recovery"> <a href="#" id="flipToLogin" class="flipLink">↩ Go Back</a> </p>
                      </li>
                   </ul>
                   <input type="submit" value="Recover" style="visibility: hidden" />
                   </form>
                </div>
             </section>
          </div>
       </div>
    </div>
}  


@helper LoginForm(UrlHelper Url)
{
    <div id="login">
        <div id="makeLogin" class="loginContainer">
            <header>
                <h1>Login</h1>
                <span class="close"></span>
            </header>

            <form id="login-form" action="" method="post">
                <p class="hide banner"></p>
                <p>
                    <label for="email">Email</label>
                    <input type="email" name="UserName" id="email" data-validation-engine="validate[required,custom[email]]"
                           data-errormessage-value-missing="Enter your email" 
                           data-errormessage-custom-error="Invalid email address" 
                        >
                </p>

                <p>
                    <label for="password">Password</label>
                    <input type="password" name="Password" id="password" class="pw field-password validate[required]">
                    <input type="hidden" name="remember" id="remember" value="false">
                </p>

                <p>
                    <button type="submit">LOGIN</button>
                </p>
                <p class="forgotPassword">
                    <a href="#">Forgot your password?</a>
                </p>
            </form>
            <footer>
                <p>iNow user? You'll have to log into iNow to set up your Chalkable account. Sign into iNow and click the Chalkable link on the top right corner.</p>
            </footer>
        </div>

        <div id="resetPassword" class="loginContainer hide">
            <header>
                <h1>Reset password</h1>
                <span class="close"></span>
            </header>

            <form id="reset-form" action="@Url.Content("~/User/ResetPassword")" method="post">
                <p class="hide banner"></p>
                <p>
                    <label for="email">Email</label>
                    <input type="email" name="email" id="email3" class="validate[required,custom[email]]">
                </p>

                <p>
                    <button type="submit">SUBMIT</button>
                </p>
                <p class="forgotPassword">
                    <a href="#">Back to login</a>
                </p>
            </form>
            <footer>
                <p></p>
            </footer>
        </div>
    </div>
}


@helper RenderChlkCopyrightYear(){
    <footer>
        &copy; @DateTime.Now.Year Chalkable. Revision: @CompilerHelper.Version <br/>
    </footer>
}    