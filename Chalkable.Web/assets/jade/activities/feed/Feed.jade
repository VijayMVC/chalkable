-var noComplete = self.completeOnly && !self.items.length
-var typesEnum = chlk.models.announcement.AnnouncementTypeEnum

div(class = noComplete ? "no-complete" : "").feed-container
    -var topData = self.getTopData()
    -var isAdmin = self.getUserRole().isAdmin()
    -var listAction = self.isInProfile() ? 'listForProfile' : 'list'
    -var announcementsAction = self.isInProfile() ? 'getAnnouncementsForProfile' : 'getAnnouncements'
    -var selected
    if !self.isInProfile()
        if isAdmin
            +GradesToolBarWithAll(topData, 'feed', listAction, [true, self.importantOnly])
            -selected = topData.getSelectedIds()
        else
            +ClassesToolBarWithAll(topData, 'feed', listAction, [true, self.importantOnly])
            -selected = topData.getSelectedItemId();
    else
        -selected = self.getClassId()

    -var ableCopy = self.getUserRole().isTeacher() && selected && selected.valueOf()

    h2.page-title Feed
    .action-bar
        .items
            if self.importantOnly
                .pressed= Msg.ToDo
                +ActionLinkButton('feed', listAction, selected || '', true, false, 0)= Msg.All
            else
                +ActionLinkButton('feed', listAction, selected || '', true, true, 0)= Msg.ToDo
                .pressed= Msg.All
    //+ActionLink('feed', 'stopNotificationsInterval')#stop-notifications-interval.x-hidden
    if noComplete
        label#feed-arrow.blue-arrow.left-up-arrow=Msg.See_more_items
        label#no-items.blue-arrow.gray.div=Msg.No_items_marked_important
    else
        +ActionForm('feed', announcementsAction).wrapper.no-working.form-for-grid
            input(type="hidden", name="start", value=(self.getStart() || 0))
            input(type="hidden", name="inProfile", value=self.isInProfile() ? 'true' : '')
            input(type="hidden", name="count", value=10)
            input(type="hidden", name="importantOnly", value=self.importantOnly && self.importantOnly.toString())
            //input(type="hidden", name="sorttype", value=self.isLatest()).latest-earliest-input
            input(type="submit", name="submitType", value="sort")#sort-submit.x-hidden
            +Hidden('toSet', '').to-set
            +Hidden('announcementsToCopy').announcements-to-copy
            input(type="hidden", name=isAdmin && !self.isInProfile() ? "gradeLevels" : "classId", value=selected)

            if ableCopy
                .left-buttons-block.copy-buttons-block
                    .left-block.i-b
                        .box-checkbox.circle
                            +Checkbox('allTasks', false, false, true).all-tasks-check
                        LABEL.text All tasks
                    .right-block.i-b.right
                        .i-b.copy-to-block
                            LABEL.text Copy to:
                            +DoubleSelect('toClassId', self.getClassesForSelect()).copy-to-select
                        +DatePicker('copyStartDate')(
                            data-options={
                                showOtherMonths: true,
                                selectOtherMonths: true
                            }
                        ).copy-start-date
                        BUTTON(type="button").negative-button.cancel-copy Cancel
                        BUTTON(type="submit", name="submitType", value="copy", disabled="disabled").blue-button.copy-submit Copy
            .left-buttons-block.tools-buttons-block(class=self.hasFilters() ? '' : 'hidden')
                if !self.isInProfile() && self.isImportantOnly() && self.items.length
                    input(type="submit", name="submitType", value="markDone")#mark-done-submit.x-hidden
                    +Select('markDoneOption')(data-placeholder = 'Mark Done', value = 0).markDoneSelect
                        +Option(0, '', false)
                        +Option(1, 'Items due before today', false)
                        +Option(2, 'Items older than 30 days', false)
                        +Option(3, 'All Items', false)
                +Select('gradingperiodid')(data-placeholder = self.getStartDate() && (self.getStartDate().format('M d - ') + self.getEndDate().format('M d')), value = 0).gradingPeriodSelect
                    +Option(-2, '', !!self.getStartDate())
                    +Option(null, 'Any Time', (!self.getGradingPeriodId() || !self.getGradingPeriodId().valueOf()) && !self.getStartDate())
                    each gp in self.getGradingPeriods()
                        +Option(gp.getId().valueOf(), gp.getName(), self.getGradingPeriodId() == gp.getId())
                    +Option(-1, 'Custom Range...', false)
                div(class = self.isImportantOnly() ? 'important-only' : '').date-range-popup.popup-bubble.top.hidden
                    .date-range
                        +DatePicker('fromdate', self.getStartDate())(
                            data-options={
                                showOtherMonths: true,
                                selectOtherMonths: true,
                                inCurrentSchoolYear: true,
                                dateFormat: 'M d, yy',
                                endRangeSelector: "#toDate",
                                maxDate: self.getEndDate() && self.getEndDate().getDate()
                            },
                            data-value=self.getStartDate() ? self.getStartDate().format('mm/dd/yy') : ''
                        )#fromDate.start-end-picker
                        | -
                        +DatePicker('todate', self.getEndDate())(
                            data-options={
                                showOtherMonths: true,
                                selectOtherMonths: true,
                                inCurrentSchoolYear: true,
                                dateFormat: 'M d, yy',
                                startRangeSelector: "#fromDate",
                                minDate: self.getStartDate() && self.getStartDate().getDate()
                            },
                            data-value=self.getEndDate() ? self.getEndDate().format('mm/dd/yy') : ''
                        )#toDate.start-end-picker
                        br
                        Button(type="submit", name="submitType", value="sort", disabled = !self.getStartDate() || self.getEndDate())#date-ok-button.blue-button=Msg.OK
                if self.isInProfile() || !isAdmin
                    +Select('announcementtype')(data-placeholder = 'Any Type').annTypeSelect.submit-after-select
                        +Option(null, 'All Types', !self.getAnnType())
                        +Option(typesEnum.CLASS_ANNOUNCEMENT.valueOf(), 'Activities Only', typesEnum.CLASS_ANNOUNCEMENT == self.getAnnType())
                        +Option(typesEnum.LESSON_PLAN.valueOf(), 'Lesson Plan Only', typesEnum.LESSON_PLAN == self.getAnnType())
                        +Option(typesEnum.SUPPLEMENTAL_ANNOUNCEMENT.valueOf(), 'Supplemental Only', typesEnum.SUPPLEMENTAL_ANNOUNCEMENT == self.getAnnType())
                +Select('sorttype')(data-placeholder = 'Sort').sortSelect.submit-after-select
                    +Option(0, 'Due Date: Earliest', self.getSortType() == chlk.models.announcement.FeedSortTypeEnum.DUE_DATE_ASCENDING)
                    +Option(1, 'Due Date: Latest', self.getSortType() == chlk.models.announcement.FeedSortTypeEnum.DUE_DATE_DESCENDING)
                if self.hasFilters()
                    .clear-filters Clear Filters
            .right-buttons-block
                +ActionLink('feed', 'feedPrinting', selected, self.importantOnly)(data-tooltip="Print").print-btn
                if ableCopy
                    a(href="javascript:", data-tooltip="Copy").copy-btn.copy-activities
                a(href="javascript:", class=self.hasFilters() ? 'active' : '', data-tooltip="Feed Tools").tools-btn.feed-tools
            +ListView(self.items)(
                infiniteScroll = true,
                needGoToButton = true,
                pageSize = 10
            ).feed-grid
                Button(type="submit", class="scroll-start-button x-hidden", name="submitType", value="scroll")
                each item in self.items
                    +FeedItem(item, self.isReadonly(), false, self.isStaringDisabled())