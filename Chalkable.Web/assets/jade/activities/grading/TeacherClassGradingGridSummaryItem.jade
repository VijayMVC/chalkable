mixin TeacherClassGradingGridSummaryCell(info, maxScore, gradable, canPutOnlyZero)
    normalValue = info.getNormalValue()
    -numericV = parseFloat(normalValue)
    if info.getGradeValue() && isNaN(parseInt(info.getGradeValue(), 10)) && numericV
        -normalValue= numericV.toFixed(2) + '(' + info.getGradeValue() + ')'

    div(
        class= (!isNaN(parseInt(normalValue, 10)) ? '' : 'letter ') + (info.isEmptyGrade() ? "empty-grade" : "") + (info.needStrikeThrough() ? ' dropped-value' : ''),
        data-id= info.getId(),
        data-announcementid= parseInt(info.getAnnouncementId().valueOf(), 10),
        data-studentid= info.getStudentId(),
        data-dropped= info.isDropped(),
        data-islate= info.isLate(),
        data-isexempt= info.isExempt(),
        data-isabsent= info.isAbsent(),
        data-isincomplete= info.isIncomplete(),
        data-comment= info.getComment(),
        data-isincludeinaverage=info.isIncludeInAverage()
    ).grade-info
        span(data-grade-value=info.getGradeValue()).grade-text=normalValue
        cls = info.getAlertClass(maxScore, true)
        div(class=cls, data-tooltip=info.getTooltipText(maxScore, true)).alert-flag
        if info.getComment()
            .with-comment
        if gradable
            .edit-cell

mixin StudentAverages(tpl)
    each studentAvg, i in tpl.getStudentAverages()
        .dotted-container.grade-container.with-horizontal-dots.avgs-container
            text = tpl.getModel().displayAvgName(studentAvg)
            .grading-grid-th
                div(data-tooltip=text, data-sort-type = "avg", data-sort-avg-index = i).type-name=text
                .time
                .max-score.dotted-h
            each average,i in studentAvg.getAverages()
                .dotted-h.grade-value.avg-value-container(
                    row-index=i,
                    class=((i == tpl.getRowIndex() ? 'active-row ' : '') + (self.isAbleEdit() ? 'gradable' : '')),
                    data-able-display-alpha-grades=self.isAbleDisplayAlphaGrades(),
                    data-able-round-displayed-averages=self.isRoundDisplayedAverages(),
                    data-average-id=average.getAverageId(),
                    data-student-name=self.getStudents()[i].getStudentInfo().getDisplayName(),
                    data-student-id=average.getStudentId().valueOf(),
                    data-grading-period-id=self.getGradingPeriod().getId().valueOf(),
                    data-grading-period-name=self.getGradingPeriod().getName())

                    +RenderWith(average, chlk.templates.grading.StudentAverageTpl)(
                        ableDisplayAlphaGrades = self.isAbleDisplayAlphaGrades(),
                        roundDisplayedAverages = self.isRoundDisplayedAverages(),
                        gradingPeriodId = self.getGradingPeriod().getId()
                    )
            div(data-average-id=studentAvg.getAverageId()).dotted-h.total-average.grade-value=tpl.getModel().displayAverages(studentAvg.getTotalAverage())

mixin DisplayTotalPoints(model)
    -var studentTotalPoints = model.getStudentTotalPoints()
    if studentTotalPoints && model.isAbleDisplayTotalPoints()
        .dotted-container.grade-container.with-horizontal-dots.total-points
            .grading-grid-th
                div(data-tooltip=Msg.Total_Points, data-sort-type = "total").type-name= Msg.Total_Points
                .time
                .max-score.dotted-h
            each studentTotalPoint, i in studentTotalPoints
                div(row-index=i, data-student-id=studentTotalPoint.getStudentId().valueOf()).dotted-h.grade-value.total-point=studentTotalPoint.displayTotalPoint()

            .dotted-h.grade-value

.ann-types-container
    +ActionForm('grading', 'changeStudentsOrder').change-order-form
        +Hidden('studentIds', self.getStudentIds()).student-ids
    if !self.getGradingItems().length || !self.getStudents().length
        .no-items-text=Msg.No_grades_yet
    else
        .dotted-container.name-container.with-horizontal-dots
            .grading-grid-th
                .type-name(data-sort-type = "name", data-sort-order="asc", data-no-href=true)
                    =Msg.Student(true)
                +ActionLink('grading', 'gradeBookReport', self.getGradingPeriod().getId(), self.getClassId(), self.getGradingPeriod().getStartDate().toStandardFormat(), self.getGradingPeriod().getEndDate().toStandardFormat()).report-link
                .time
                .student-name
                    .max-score.dotted-h
            each student,i in self.getStudents()
                name = student.getStudentInfo().getDisplayName()
                div(row-index=i).student-name
                    div(data-tooltip=name, data-tooltip-type="overflow").dotted-h=name
                    if student.isWithdrawn()
                        div(data-tooltip="Withdrawn").withdrawn
            .student-name
                .dotted-h=Msg.Avg
        +LeftRightToolbar()(
            style="width:" + self.getTbWidth() + "px",
            itemClass='grade-container',
            fixedElementMargin=true,
            fixedElementWidth=false,
            rightPadding=-1,
            elWidth=117
        ).grid-toolbar.i-b.big-arrows
            if self.isAbleDisplayStudentAverage()
                +StudentAverages(self)
            +DisplayTotalPoints(self)
            each announcement in self.getGradingItems()
                maxScore = announcement.getMaxScore()
                div(data-max-score=announcement.getMaxScore()).dotted-container.grade-container.with-horizontal-dots.announcement-container
                    .grading-grid-th
                        +ActionLink('announcement', 'view', announcement.getId())
                            div(data-tooltip=announcement.getTitle(), data-tooltip-type="overflow").type-name=announcement.getTitle()
                        .time=announcement.getExpiresDate().format('M d')
                        .max-score.dotted-h(data-sort-type="anno", data-sort-anno-id=announcement.getId().valueOf())=maxScore
                    studentItems = announcement.getStudentAnnouncements().getItems()
                    each info,i in studentItems
                        gradable = self.isAbleEdit() && announcement.isGradable()
                        canPutOnlyZeroScore = !(self.getSchoolOptions().isAllowScoreEntryForUnexcused() || !info.isUnExcusedAbsent());
                        div(
                            row-index=i
                            data-able-drop-student-score= announcement.isAbleDropStudentScore(),
                            data-able-exempt-student-score= announcement.isAbleExemptStudentScore(),
                            data-gradable= gradable,
                            data-max-score= maxScore,
                            data-canputonlyzero= canPutOnlyZeroScore.toString(),
                            class='item-' + info.getAnnouncementId().valueOf() + '-' + info.getStudentId() + (gradable ? ' gradable' : '') + (i >= studentItems.length - 1 ? " top-popup" : "") + (studentItems.length == 1 ? " one" : "")
                        ).dotted-h.grade-value
                            +TeacherClassGradingGridSummaryCell(info, maxScore, gradable, canPutOnlyZeroScore)
                    div(class='avg-' + announcement.getId().valueOf()).dotted-h.grade-value=self.getModel().displayAverages(announcement.calculateGradesAvg(2))