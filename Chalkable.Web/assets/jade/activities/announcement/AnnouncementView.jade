mixin AppAttachmentBlock(item, pictureHref, i)
    +LoadingImage(src=pictureHref, id="loading-image-" + i)
        .title
            div=item.getName()


mixin AnnouncementTooltip()
    div(attributes).announcement-view-tooltip
        .comment-container
            block
        .comment-triangle
            .white.comment-triangle

-function glue() { return [].slice.call(arguments).filter(function (_) { return !/^\s*$/.test(_||'') }).join(' - ') }
            
mixin Glue_()
    = glue.apply(null, arguments) 

.announcement-view.not-transparent
    -var lessonPlan = self.getLessonPlanData()
    -var classAnnouncement = self.getClassAnnouncementData()
    -var adminAnnouncement = self.getAdminAnnouncementData()
    -var studentAnnouncements = false
    -var studentAnnouncementsInfo = self.getStudentAnnouncements()
    -var applications = self.getApplications()
    -var gradeViewApps = self.getGradeViewApps()
    -var grade = self.getGrade()
    -var itemWithExpiresDate = classAnnouncement || adminAnnouncement
    .autocomplete-list.announcement-view
    if studentAnnouncementsInfo
        studentAnnouncements = studentAnnouncementsInfo.getItems()

    .buttons
        if !self.getUserRole().isStudent()
            +ActionButton('announcement', 'edit', self.getId())(class = self.isAbleEdit() ? "" : "disabled").right Edit
        +ActionButton('feed', 'doToList').back-button Back
        .clear-fix

    h2.page-title
        if adminAnnouncement
            +Glue_(self.getTitle() || Msg.Admin_Announcement, "")
        if lessonPlan
            +Glue_(lessonPlan.getClassName(), Msg.Lesson_Plan)
        if classAnnouncement
            +Glue_(self.getAnnouncementTypeName(), classAnnouncement.getClassName())
    .announcement-details-panel
        .details-container.silver-panel

            if self.getUserRole().isStudent() && ( (self.isStudentGraded() && self.displayStudentGradeValue()) || self.getComment() )
                .comment-grade-container
                    .grade-value.right=self.displayStudentGradeValue()
                    .comment(
                        data-tooltip = self.getComment(),
                        data-tooltip-type = "overflow",
                        data-tooltip-class = "wide"
                    )= self.getComment() || (Msg.Your_grade + ":")
            if self.getUserRole().isTeacher() && (lessonPlan && lessonPlan.isHiddenFromStudents() || classAnnouncement && classAnnouncement.isHiddenFromStudents())
                +AnnouncementTooltip().make-visible-container
                    .comment This item is hidden from students.
                    +ActionLink('announcement', 'makeVisible', self.getId(), self.getType()).make-visible-btn Make visible
            br
            .table
                .avatar-block-left
                    if self.getOwner()
                        if self.getUserRole().isTeacher()
                            +ProfileLink(self.getOwner(), 'teacher')(
                                data-tooltip=self.getOwner().getFullName(),
                            ).image-container.person-img-container
                                +PersonImg(self.getOwner(), 47)
                        else
                            a(data-tooltip=self.getOwner().getFullName()).image-container.person-img-container
                                +PersonImg(self.getOwner(), 47)

                .description
                    .chat-bubble
                        if itemWithExpiresDate
                            h2(class=itemWithExpiresDate.getExpiresDateColor())=itemWithExpiresDate.getExpiresDateText()
                        p!= glue(self.getTitle(), self.linkify(self.getContent()))

                        if self.getStandards() && self.getStandards().length > 0
                            .standards-container
                                .title Standards:
                                .standard-list
                                    each standard in self.getStandards()
                                        button(data-tooltip = standard.getDescription()).same-on-hover= standard.getName()
                                        = ' '

                        if self.getRecipients() && self.getRecipients().length > 0
                            .standards-container
                                .title Groups:
                                .standard-list
                                    each recipient in self.getRecipients()
                                        button(data-tooltip = recipient.getGroupName(), data-tooltip-type="overflow").same-on-hover= recipient.getGroupName()
                                        = ' '

        -var attachments = self.getAnnouncementAttachments() || []
        -var applications = self.getApplications() || []
        if attachments.length + applications.length
            +CloseOpen('Attachments')
                .content.attachments-and-applications
                    +RenderWith(self.getModel(), chlk.templates.announcement.AnnouncementAppAttachments)(
                        userRole = self.getUserRole()
                    )

        if self.getUserRole().isStudent()
            -var myAttachments = (self.getAnnouncementAttachments() || []).filter(function (_) { return _.isOwner(); });
            if classAnnouncement && (classAnnouncement.isGradable() || myAttachments.length)
                +CloseOpen('My Attachments')
                    #attachments-block.student-attachments.content
                        +RenderWith(self.getModel(), chlk.templates.announcement.AnnouncementForStudentAttachments)(
                            userRole = self.getUserRole()
                        )
            if self.getStandards() && self.getStandards().length > 0 && self.getStandards().filter(function(standard){return standard.getAcademicBenchmarkId()}).length
                +CloseOpen('Practice & Improve')
                    .student-attachments.content
                        .announcement-item.attachment
                            .wrapper
                                img(src=window.scriptsRoot + '/Content/images2/study-center-banner.png')
                                .title Study Center
                                +ActionButton('studycenter', 'startPractice', self.getStandards().map(function (_) { return _.getStandardId(); })) Start Practice


        -var showPostQuestion = !self.isAnnOwner() && self.getUserRole().isStudent()
        if showPostQuestion || self.getAnnouncementQnAs().length
            .questions-and-answers
                +RenderWith(self.getModel(), chlk.templates.announcement.AnnouncementQnAs)(
                    userRole = self.getUserRole(),
                    currentUser = self.getCurrentUser()
                )

        if classAnnouncement
            if !self.getUserRole().isStudent() && studentAnnouncements && studentAnnouncements.length && classAnnouncement.isGradable()
                +CloseOpen('Grades')
                    .auto-grades
                        each app in self.getAutoGradeApps()
                            .item(data-id=app.id)
                                -var count = app.students.length
                                .title #{app.name} posted #{count} #{count > 1 ? "grades" : "grade"}
                                .buttons: +ActionButton('', '').green-button.view-auto-grades View
                                    +ActionButton('announcement', 'applyAutoGrades', app.id)(style="display:none").blue-button.accept-auto-grades.accept-decline Accept
                                    +ActionButton('announcement', 'discardAutoGrades', app.id)(style="display:none").negative-button.decline-auto-grades.accept-decline Decline

                    div(class=self.getApplicationsCount() ? "" : "no-applications").grading-part
                        +Hidden('maxScore', classAnnouncement.getMaxScore())#max-score
                        +RenderWith(studentAnnouncementsInfo, chlk.templates.announcement.AnnouncementGradingPartTpl)(
                            autoGradeApps = self.getAutoGradeApps(),
                            readonly = !classAnnouncement.isAbleToGrade(),
                            gradeViewApps = self.getGradeViewApps(),
                            applications = self.getApplications(),
                            userRole = self.getUserRole(),
                            owner = self.getOwner(),
                            announcementId = self.getId(),
                            maxScore = classAnnouncement.getMaxScore(),
                            ableDropStudentScore = classAnnouncement.isAbleDropStudentScore(),
                            ableToExempt = classAnnouncement.isAbleToExempt(),
                            gradable = classAnnouncement.isGradable(),
                            standards = self.getStandards(),
                            LEIntegrated = self.isLEIntegrated(),
                            classId = classAnnouncement.getClassId()
                        )