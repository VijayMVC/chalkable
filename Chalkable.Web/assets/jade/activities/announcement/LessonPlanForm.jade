mixin AnnouncementTypeToolBar(types, announcement, lessonPlan)
    if types.length > 8
        .action-bar
            .items
                +ActionLink('announcement', 'lessonPlan', lessonPlan.getClassId()).item.announcement-type-button Lesson Plan
                SPAN.type-text #{Msg.Type}:&nbsp;
                +Select('typeid')#type-select
                    each item in types
                        +Option(item.getId(), item.getName(), typeId==item.getId())(
                            data-typeid=item.getId(),
                            data-typename=item.getName()
                        )
                BUTTON(
                    type = announcement && announcement.getState() ? "button" : "submit",
                    name="submitType",
                    value="save"
                )#announcement-type-btn.validate-skip.x-hidden
    else
        .action-bar
            .items
                +ActionLink('announcement', 'lessonPlan', lessonPlan.getClassId()).item.announcement-type-button.pressed Lesson Plan
                if !announcement.getState()
                    each item in types
                        +ActionLink('announcement', 'add', lessonPlan.getClassId(), item.getId()).item.announcement-type-button=item.getName()

-var topData = self.getTopData()
-var announcement = self.getAnnouncement()
-var topItems = topData.getTopItems()
-var lessonPlan = announcement && announcement.getLessonPlanData()
-var classId = announcement && lessonPlan.getClassId() ? lessonPlan.getClassId().valueOf() : null
-var typeId = self.getSelectedTypeId()
-var state = announcement && announcement.getState()
-var types = self.getClassInfo() ? self.getClassInfo().getTypesByClass() : []

.announcement-form.loader-container
    if announcement && lessonPlan.getClassId()
        h2.page-title= lessonPlan.getClassName()
        .loader
        +ActionForm('announcement', 'onLessonPlanSave')(onlySubmitValidate=true).no-working
            +ClassesToolBar(topData, null, null, null, announcement.getState())(pressAfterClick=!announcement.getState())
            .not-transparent(class=(classId ? '' : 'x-hidden'))
                +AnnouncementTypeToolBar(types, announcement, lessonPlan)
            .ann-form-container(class=(state || classId && typeId ? '' : 'x-hidden'))
                +Hidden('id', announcement.getId().valueOf())
                +Hidden('isedit', !!announcement.getState())(data-isedit = !!announcement.getState()).is-edit
                +Hidden('classid', classId)
                +Hidden('type', announcement.getType())

                -var standards = announcement.getStandards() || []

                +ActionLink('announcement', 'showTitlePopUp')#show-title-popup.x-hidden
                .title-block-container.with-date
                    +RenderWith(announcement.getTitleModel(), chlk.templates.announcement.AnnouncementTitleTpl)
                -var needStandardsBlock = (standards.length > 0 || announcement.isCanAddStandard())
                .table
                    .left-block(class=needStandardsBlock ? 'with-standards' : '')
                        .left-block-container
                            .left-top-container
                                +RenderWith(announcement, chlk.templates.announcement.LessonPlanSearchTpl)
                            +TextArea(name="content", placeholder="Assignment")= announcement.getContent()
                            if needStandardsBlock
                                .add-standards-container
                                    .add-standards
                                        .standards-list
                                            +RenderWith(self.prepareStandardsListData(), chlk.templates.standard.AnnouncementStandardsTpl)(
                                            userRole = userRole
                                            studyCenterEnabled = self.isStudyCenterEnabled()
                                            ableToRemoveStandard=announcement.isAbleToRemoveStandard())
                                        if announcement.isCanAddStandard()
                                            .title=standards.length > 0 ? Msg.Click_to_add_more : Msg.Click_to_add_standard
                                            +ActionLink('announcement', announcement.getState() ? 'showStandards' : 'showStandardsOnCreate', Msg.Lesson_Plan, announcement.getId(), classId).add-standards-btn.x-hidden
                            .drawer-icon
                        .drop-down-container.popup-bubble.top
                        input(type="submit",id="list-last-button",value="listLast", name="submitType", class='x-hidden validate-skip')
                        if !announcement.getState()
                            input(type="submit",id="save-form-button",value="saveNoUpdate", name="submitType", class='x-hidden validate-skip')
                    .right-block
                        .date-picker-startdate
                            label(for="startdate") Due min date
                            +DatePicker('startdate', lessonPlan.getStartDate())(
                            data-options={
                                showOtherMonths: true,
                                selectOtherMonths: true,
                                dateRanges: classScheduleDateRanges
                            },
                            data-value=lessonPlan.getStartDate() ? lessonPlan.getStartDate().format('mm/dd/yy') : ''
                            placeholder='Due min date',
                            class='validate[required]'
                            )#mindate
                            .calendar-mark
                        .date-picker-container
                            label(for="enddate") Due max date
                            +DatePicker('enddate', lessonPlan.getEndDate())(
                            data-options={
                                showOtherMonths: true,
                                selectOtherMonths: true,
                                dateRanges: classScheduleDateRanges
                            },
                            data-value=lessonPlan.getEndDate() ? lessonPlan.getEndDate().format('mm/dd/yy') : ''
                            placeholder='Due max date'
                            class='validate[required]'
                            )#mindate
                            .calendar-mark
                        .advanced-options
                            A.advanced-options-btn(href="javascript:;")= Msg.Advanced_options
                            .separator.x-hidden
                            .advanced-options-container.x-hidden.popup-bubble.top
                                .check-box-container
                                    label(for="ann-hidefromstudents")=Msg.Hide_from_Students
                                    +SlideCheckbox('hidefromstudents', lessonPlan.isHiddenFromStudents(), false)
                                    .question-mark(data-tooltip=Msg.Hide_From_Student_Tooltip_Message) ?
                                .check-box-container
                                    label(for="add-to-gallery") Add to Lesson Plan Gallery
                                    +SlideCheckbox('addtogallery', false, false)#add-to-gallery
                                .category-container.new-input-container
                                    label(for="galleryCategoryId") Category:
                                    +Select('galleryCategoryId')#galleryCategoryId
                                        each item in announcement.getCategories()
                                            +Option(item.getId(), item.getName(), item.getId() == lessonPlan.getGalleryCategoryId().valueOf())

                .apps-attachments-bock.attachments-and-applications
                ann = announcement
                    -ann.setNeedButtons(true)
                    -ann.setNeedDeleteButton(true)
                    +RenderWith(ann, chlk.templates.announcement.AnnouncementAppAttachments)(
                    userRole = userRole,
                    studyCenterEnabled = self.isStudyCenterEnabled()
                    )
                .suggested-apps
                    if announcement.getStandards() && announcement.getStandards().length > 0 && self.isStudyCenterEnabled()
                        +RenderWith(self.prepareSuggestedAppListData(), chlk.templates.apps.SuggestedAppsListTpl)
                .bottom-block
                    +Button()(
                    type="submit",
                    name="submitType",
                    value=announcement.getState() ? "submitOnEdit" : "submit"
                    ).special-button.blue-button.submit-btn.submit-announcement.big-button
                        =(announcement.getState() ? Msg.Save : Msg.Submit)
                    if announcement.getState()
                        +ActionLink('announcement', 'delete', announcement.getId(), announcement.getAnnouncementTypeName())
                            +Button()(
                            type="button",
                            ).special-button.red-button.big-button.submit-btn.add-loader-btn.negative-button= Msg.Delete
                    else
                        +ActionLink('announcement', 'discard').grey-link.not-blue.add-loader-btn=Msg.Discard

                if announcement.getState()
                    .duplicate-btn-container
                        +ActionButton('announcement', 'showDuplicateForm', announcement.getId(), topData.getSelectedItemId()).big-button.blue-button.submit-btn=Msg.Duplicate.toUpperCase()
            .choose-type(class=(classId && !typeId && !state && types.length ? '' : 'x-hidden'))
            if !classId
                if topItems.length
                    .choose-class
                else
                    .no-items-text There are no classes for current term
    else
        +ClassesToolBar(topData, 'announcement', 'add')
        if !classId
            if topItems.length
                .choose-class
            else
                .no-items-text There are no classes for current term